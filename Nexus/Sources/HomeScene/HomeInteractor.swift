//
//  HomeInteractor.swift
//  GhostVPN
//
//  Created by Владислав on 30.11.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import VPNManager
import LocationService
import TimeService

// MARK: - NetworkError
enum NetworkError: Error {
    case invalidURL
    case noData
}

protocol HomeBusinessLogic {
    func viewDidAppear()
    func connectToVPN()
    func disconnectFromVPN()
}

protocol HomeDataStore {
    //var name: String { get set }
}

final class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    private struct Settings {
        static let tickInterval: TimeInterval = 1
    }
    
    weak var presenter: HomePresentationLogic?

    private let vpnManager: VPNManagerProtocol
    private let locationService: LocationService
    private let timeService: TimeService
    
    private var connectionTime: TimeInterval = 0 {
        didSet { presenter?.connectionTime(connectionTime) }
    }
    
    //MARK: - init(_:)
    init(
        vpnManager: VPNManagerProtocol,
        locationService: LocationService,
        timeService: TimeService = TimeServiceImpl.shared
    ) {
        self.vpnManager = vpnManager
        self.locationService = locationService
        self.timeService = timeService
    }
    
    //MARK: - Public methods
    func viewDidAppear() {
        let selectedService = locationService.currentLocation()
    }
    
    func connectToVPN() {
        presenter?.connectionState(.loading)
        vpnManager.connectToVPN(
            .init(
                username: "",
                serverAddress: ""
            ),
            completion: handler()
        )
    }
    
    func disconnectFromVPN() {
        vpnManager.disconnectFromVPN()
        timeService.stop()
        presenter?.connectionState(.disconnected)
    }
    
}

private extension HomeInteractor {
    //MARK: - Private methods
    func startTimer() {
        timeService.start(interval: Settings.tickInterval) {
            self.connectionTime += 1
        }
    }
    
    func handler() -> (Error?) -> Void {
        { [weak self] error in
            guard let self else { return }
            switch error {
            case .some(let error):
                presenter?.connectionState(.error(error))
            case .none:
                presenter?.connectionState(.connected)
                startTimer()
            }
        }
    }
}
