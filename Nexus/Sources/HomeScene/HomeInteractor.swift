//
//  HomeInteractor.swift
//  GhostVPN
//
//  Created by Владислав on 30.11.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import VPNManager
import LocationService
import TimeService

// MARK: - NetworkError
enum NetworkError: Error {
    case invalidURL
    case noData
}

protocol HomeBusinessLogic {
    func connectToVPN()
    func disconnectFromVPN()
    func viewDidAppear()
}

protocol HomeDataStore {
    //var name: String { get set }
}

final class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    private struct Settings {
        static let tickInterval: TimeInterval = 1
    }
    
    weak var presenter: HomePresentationLogic?
    
    private let vpnManager: VPNManagerProtocol
    private let locationService: LocationService
    private let timeService: TimeService
    private var connectionTime: TimeInterval = 0
    
    //MARK: - init(_:)
    init(
        vpnManager: VPNManagerProtocol,
        locationService: LocationService,
        timeService: TimeService = TimeManagerImpl.shared
    ) {
        self.vpnManager = vpnManager
        self.locationService = locationService
        self.timeService = timeService
    }
    
    //MARK: - Public methods
    func viewDidAppear() {
        guard let selectedService = locationService.currentLocation() else {
            presenter?.presentHomeData(connectionState: .disconnected, connectionTime: connectionTime, serverInfo: nil, error: NetworkError.noData)
            return
        }
        presenter?.presentHomeData(connectionState: .connected, connectionTime: connectionTime, serverInfo: selectedService, error: nil)
    }
    
    func connectToVPN() {
        guard let selectedService = locationService.currentLocation() else {
            presenter?.presentHomeData(connectionState: .error(NetworkError.noData), connectionTime: connectionTime, serverInfo: nil, error: NetworkError.noData)
            return
        }
        
        // Здесь должна быть логика подключения к VPN
        vpnManager.connectToVPN(
            .init(
                userName: "",
                serverAddress: ""
            ),
            completion: handler()
        )
        
        // Обновить состояние подключения
        presenter?.presentHomeData(connectionState: .loading, connectionTime: connectionTime, serverInfo: selectedService, error: nil)
    }
    
    func disconnectFromVPN() {
        vpnManager.disconnectFromVPN()
               timeService.stop()
               presenter?.presentHomeData(connectionState: .disconnected, connectionTime: connectionTime, serverInfo: nil, error: nil)
           }
}

//MARK: - private methods
private extension HomeInteractor {
    func startTimer() {
        timeService.start(interval: Settings.tickInterval) {
            self.connectionTime += 1
        }
    }
    
    func handler() -> (Error?) -> Void {
           { [weak self] error in
               guard let self = self else { return }

               let currentState: ConnectionState = error != nil ? .error(error!) : .connected
               self.presenter?.presentHomeData(connectionState: currentState, connectionTime: self.connectionTime, serverInfo: self.locationService.currentLocation(), error: error)

               if error == nil {
                   self.startTimer()
               }
           }
       }
}
