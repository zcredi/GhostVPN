//
//  HomePresenter.swift
//  GhostVPN
//
//  Created by Владислав on 30.11.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import LocationService

//MARK: - Formatter Time
func formatTime(_ time: TimeInterval) -> String {
    let formatter = DateComponentsFormatter()
    formatter.allowedUnits = [.hour, .minute, .second]
    formatter.unitsStyle = .positional
    formatter.zeroFormattingBehavior = .pad
    return formatter.string(from: time) ?? "00:00:00"
}

struct ServerViewModel {
    let iconName: String
    let title: String
    let ipAdress: String
    let ping: String
    
    init(from serviceInfo: ServiceInfo) {
        self.iconName = serviceInfo.iconName
        self.title = serviceInfo.title
        self.ipAdress = serviceInfo.ipAdress
        self.ping = serviceInfo.ping
    }
}

enum ConnectionState: Equatable {
    case disconnected
    case loading
    case connected
    case error(Error)
    
    static func == (lhs: ConnectionState, rhs: ConnectionState) -> Bool {
        String(describing: lhs) == String(describing: rhs)
    }
}

protocol HomePresentationLogic: AnyObject {
    func connectionState(_ state: ConnectionState)
    func connectionTime(_ time: TimeInterval)
    func currentServer(_ serviceInfo: ServiceInfo)
    func serverUnavailable()
}

final class HomePresenter: HomePresentationLogic {
    weak var view: HomeDisplayLogic?
    private let timeFormatter: (TimeInterval) -> String
    
    init(
        timeFormatter: @escaping (TimeInterval) -> String
    ) {
        self.timeFormatter = timeFormatter
    }
    
    func connectionState(_ state: ConnectionState) {
        var stateDescription: String
        switch state {
        case .disconnected:
            stateDescription = "Disconnected"
        case .loading:
            stateDescription = "Connecting"
        case .connected:
            stateDescription = "Connected"
        case .error(let error):
            stateDescription = "Error: \(error.localizedDescription)"
        }
        view?.displayConnectionState(stateDescription)
    }
    
    func connectionTime(_ time: TimeInterval) {
        let formattedTime = timeFormatter(time)
        view?.displayConnectionTime(formattedTime)
        
    }
    
    func currentServer(_ serviceInfo: ServiceInfo) {
        let viewModel = ServerViewModel(from: serviceInfo)
        view?.displayCurrentServer(viewModel)
    }
    
    func serverUnavailable() {
        let errorServerMessage = "Сервер недоступен."
        view?.displayServerError(errorServerMessage)
    }
}
