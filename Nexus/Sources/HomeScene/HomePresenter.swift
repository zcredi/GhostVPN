//
//  HomePresenter.swift
//  GhostVPN
//
//  Created by Владислав on 30.11.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import LocationService
import CommonServices
import TimeFormatting

struct ServerViewModel {
    let iconName: String
    let title: String
    let ipAdress: String
    let ping: String
    
    init(from serviceInfo: ServiceInfo) {
        self.iconName = serviceInfo.iconName
        self.title = serviceInfo.title
        self.ipAdress = serviceInfo.ipAdress
        self.ping = String(serviceInfo.ping)
    }
}

struct HomeViewModel {
    let connectionState: String
    let serverInfo: ServerViewModel?
    let connectionTime: String
    let errorMessage: String?
}

enum ConnectionState: Equatable {
    case disconnected
    case loading
    case connected
    case error(Error)
    
    static func == (lhs: ConnectionState, rhs: ConnectionState) -> Bool {
        String(describing: lhs) == String(describing: rhs)
    }
}

protocol HomePresentationLogic: AnyObject {
    func presentHomeData(connectionState: ConnectionState, connectionTime: TimeInterval, serverInfo: ServiceInfo?, error: Error?)
}

final class HomePresenter: HomePresentationLogic {
    weak var view: HomeDisplayLogic?
    private let timeFormatter: TimeFormatting
    private let localizer: Localizing
    
    init(
        timeFormatter: TimeFormatting,
        localizer: Localizing
    ) {
        self.timeFormatter = timeFormatter
        self.localizer = localizer
    }
    
    func presentHomeData(connectionState: ConnectionState, connectionTime: TimeInterval, serverInfo: ServiceInfo?, error: Error?) {
        let connectionStateDescription = description(for: connectionState)
        let formattedTime = timeFormatter.formatTime(connectionTime)
        let serverViewModel = serverInfo.map { ServerViewModel(from: $0) }
        
        let viewModel = HomeViewModelBuilder()
            .withConnectionState(connectionStateDescription)
            .withServerInfo(serverViewModel)
            .withConnectionTime(formattedTime)
            .withErrorMessage(error?.localizedDescription)
            .build()
        
        view?.displayHomeData(viewModel)
    }
    
    func description(for state: ConnectionState) -> String {
        switch state {
        case .disconnected:
            return localizer.disconnected
        case .loading:
            return  localizer.connecting
        case .connected:
            return  localizer.connected
        case .error(let error):
            return "\(localizer.error): \(error.localizedDescription)"
        }
    }
}

private extension HomePresenter {
    class HomeViewModelBuilder {
        private var connectionState: String = ""
        private var serverInfo: ServerViewModel?
        private var connectionTime: String = ""
        private var errorMessage: String?
        
        @discardableResult
        func withConnectionState(_ state: String) -> HomeViewModelBuilder {
            self.connectionState = state
            return self
        }
        
        @discardableResult
        func withServerInfo(_ info: ServerViewModel?) -> HomeViewModelBuilder {
            self.serverInfo = info
            return self
        }
        
        @discardableResult
        func withConnectionTime(_ time: String) -> HomeViewModelBuilder {
            self.connectionTime = time
            return self
        }
        
        @discardableResult
        func withErrorMessage(_ message: String?) -> HomeViewModelBuilder {
            self.errorMessage = message
            return self
        }
        
        func build() -> HomeViewModel {
            return HomeViewModel(
                connectionState: connectionState,
                serverInfo: serverInfo,
                connectionTime: connectionTime,
                errorMessage: errorMessage
            )
        }
    }
}
